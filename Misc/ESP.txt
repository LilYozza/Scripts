print("Version 1.0.9")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local isESP = false
local PlayerCon = {}
local plist = {}

local NameTagColor = Color3.fromRGB(255,0,0)
local DistanceTagColor = Color3.fromRGB(0,0,255)
local HealthTagColor = Color3.fromRGB(0,255,0)

local NameTagPosition = UDim2.new(0,0,0,0)
local DistanceTagPosition = UDim2.new(0,0,0.3,0)
local HealthTagPosition = UDim2.new(0,0,0.6,0)

local function GetPDistance(player)
	local Playerchar = Player.Character
	local char = player.Character
	if Playerchar and char then
		return math.floor((Playerchar.HumanoidRootPart.Position - char.HumanoidRootPart.Position).Magnitude + 0.5) 
	end
end

local function CreateTextLabel(name, parent, color, position)
	-- Creates Name Tag --
	local newText = Instance.new("TextLabel")
	-- Data --
	newText.Name = name
	newText.Parent = parent
	newText.Size = UDim2.new(1,0,0.3,0)
	newText.Position = position
	newText.BackgroundTransparency = 1
	newText.TextScaled = true

	-- Text --
	newText.Font = Enum.Font.FredokaOne
	newText.TextColor3 = color
end

local function CreateTag(part)
	if part:FindFirstChild("PlayerTag") then return end
	-- Creates BillBoard --
	local newBillBoard = Instance.new("BillboardGui")
	-- Data --
	newBillBoard.Name = "PlayerTag"
	newBillBoard.Parent = part
	newBillBoard.AlwaysOnTop = true
	newBillBoard.Size = UDim2.new(0, 250,0, 100)
	newBillBoard.ExtentsOffset = Vector3.new(0,3,0)


	CreateTextLabel("NameTag", newBillBoard, NameTagColor, NameTagPosition)
	CreateTextLabel("DistanceTag", newBillBoard, DistanceTagColor, DistanceTagPosition)
	CreateTextLabel("HealthTag", newBillBoard, HealthTagColor, HealthTagPosition)

end

local function RemoveESP(player)

	local char = player.Character
	if not char then return end

	local Tag = player.Character.Head:FindFirstChild("PlayerTag")
	if Tag then Tag:Destroy()end
	for _,v in pairs(plist)do
		if v == player then table.remove(plist, _) end
	end
end

local function UpdateTag(player)

	local char = player.Character
	if not char then return end

	local Tag = player.Character.Head:FindFirstChild("PlayerTag")
	if not Tag then return end

	local PlayerName = player.DisplayName
	local Distance = GetPDistance(player)
	local Health = math.floor(char.Humanoid.Health + 0.5)

	Tag.NameTag.Text = PlayerName
	Tag.DistanceTag.Text = "Distance: "..Distance
	Tag.HealthTag.Text = "Health: "..Health

end

local function AddESP(player)
	spawn(function()
		local char = player.Character
		if not char then return end
		local head = char:FindFirstChild("Head")
		if not head then return end
		table.insert(plist, player)
		CreateTag(head)
	end)
end

local function UpdateESP()
		if not isESP then return end
		for _,v in pairs(plist)do
			spawn(function()
				if v ~= Player then
					UpdateTag(v)
				end
			end)
		end
end

function _G.ESPOn()
	isESP = true
	for _,v in pairs(Players:GetPlayers())do
		spawn(function()
			if v ~= Player then
				AddESP(v)
				PlayerCon[v.UserId] = v.CharacterAdded:Connect(function()if isESP == true then AddESP(v)end end)
			end
		end)
	end
end

function _G.ESPOff()
	spawn(function()
		isESP = false
		PlayerCon = {}
		plist = {}
		for _,v in pairs(Players:GetPlayers())do
			spawn(function()
				if v ~= Player then
					RemoveESP(v)
				end
			end)
		end
	end)
end

Players.PlayerAdded:Connect(function(player)
	PlayerCon[player.UserId] = player.CharacterAdded:Connect(function()
		if isESP == true then spawn(function()AddESP(player)end) end
	end)
end)

Players.PlayerRemoving:Connect(function(player)
	if PlayerCon[player.UserId] then PlayerCon[player.UserId] = {} end
	RemoveESP(player)
end)

RunService.RenderStepped:Connect(function()
	if isESP then
		UpdateESP()
	end
	RunService.RenderStepped:Wait() 
end)
