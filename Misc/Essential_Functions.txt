--Essential Function Script

-->Services<--
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

-->Base Variables<--
local Player = Players.LocalPlayer

-->FUNCTIONS TO ADD<--
-->Return All Players [Username / DisplayName]
-->Create NameTags
-->Remove NameTags

--> Non Return Functions <--
getgenv().Touch = function(_touchPart, _basePart, _timeout)
	if _basePart and typeof(_basePart) == "number" then 
		_timeout = _basePart 
		_basePart = nil
	end
	if not _basePart then
		_basePart = Player.Character:WaitForChild("HumanoidRootPart")
	end	
	if _touchPart and _touchPart:IsA("BasePart") and _basePart:IsA("BasePart") then
		firetouchinterest(_basePart, _touchPart, 0)
		firetouchinterest(_basePart, _touchPart, 1)
	else
		warn("Touch: Bad Values...")
	end
	task.wait(_timeout)
end

--Add Angles
getgenv().MoveTo = function(_basePart, _offset)
	if not _offset or typeof(_offset) ~= "Vector3" then
		_offset = Vector3.new(0,0,0)
	end
	if _basePart and _basePart:IsA("Part")then
		Player.Character:WaitForChild("HumanoidRootPart").CFrame = _basePart.CFrame + _offset
	else
		warn("MoveTo: Bad Values...")
	end
end

getgenv().ChangeCollide = function(_tbl, _bool)
	if _tbl then
		if typeof(_tbl) == "table" then
			for _,v in pairs(workspace:GetDescendants())do
				if table.find(_tbl, v.Name) or table.find(_tbl, v)then
					if v:IsA("BasePart") then
						v.CanCollide = _bool
					end
					for __,_v in pairs(v:GetDescendants())do
						if _v:IsA("BasePart") then
							v.CanCollide = _bool
						end
					end
				end
			end
		elseif typeof(_tbl) == "Instance" then
			if _tbl:IsA("BasePart") then
				_tbl.CanCollide = _bool
			end
		end
	else
		warn("ChangeCollide: Bad Values...")
	end
end

getgenv().MovePart = function(_part, _location, _offset, _timeout)
	if _part and _location and _location:IsA("BasePart") then
		if not _offset or typeof(_offset) ~= "Vector3" then 
			_offset = Vector3.new(0,0,0)
		end
		if typeof(_part) == "table" and _part[1] then
			if typeof(_part[1]) == "Instance" then
				for _,v in pairs(_part)do
					if v:IsA("BasePart") then
						v.CFrame = _location.CFrame + _offset
						task.wait(_timeout)
					end
				end
			elseif typeof(_part[1] == "String") then
				for _,v in pairs(workspace:GetDescendants())do
					if table.find(_part, v.Name) and v:IsA("BasePart") then
						v.CFrame = _location.CFrame + _offset
						task.wait(_timeout)
					end
				end
			end
		elseif typeof(_part) == "Instance" and _part:IsA("BasePart") then
			_part.CFrame = _location.CFrame + _offset
			for _,v in pairs(_part:GetDescendants())do
				if v:IsA("BasePart") then
					v.CFrame = _location.CFrame + _offset
				end
			end
		end

	else
		warn("MovePart: Bad Values...")
	end
end

getgenv().RemovePart = function(_part)
	if _part then
		if typeof(_part) == "table" and _part[1] then
			if typeof(_part[1]) == "Instance" then
				for _,v in pairs(_part)do
					v:Destroy()
				end
			elseif typeof(_part[1]) == "string" then
				for _,v in pairs(workspace:GetDescendants())do
					if table.find(_part, v.Name) then
						v:Destroy()
					end
				end
			end
		elseif typeof(_part) == "string" then
			for _,v in pairs(workspace:GetDescendants())do
				if v.Name == _part then
					v:Destroy()
				end
			end
		end
	else
		warn("RemovePart: Bad Values...")
	end
end

--> Return Functions <--
getgenv().fromSuffixString = function(_value, _suffixes)
	if _value then
		local found = false
		if not _suffixes then
			_suffixes = {"K", "M", "B", "T", "Q"}
		end
		
		if typeof(_value) == Instance and _value:IsA("TextLabel") then
			_value = _value.Text
		end

		if typeof(_value) == "number" or tonumber(_value) then
			return tonumber(_value)
		end

		if _value == "0" or _value == "" then
			return 0	
		end

		for i, value in ipairs(_suffixes) do 
			if _value:match(value) then 
				found = true 
			end 
		end 

		if found == false then 
			return tonumber(_value) 
		end 

		local n, suffix = string.match(_value, "(.*)(%a)$") 
		if n and suffix then 
			local i = table.find(_suffixes, suffix) or 0
			local p = n:gsub("%D", "")
			return tonumber(p) * math.pow(10, i * 3) 
		end 
		return tonumber(_value) 
	else
		warn("fromSuffixString: Bad Values...")
	end

end

getgenv().TweenPart = function(_part, _des, _speed, _style)
	if _part and _des and _part:IsA("BasePart") and _des:IsA("BasePart") then
		if typeof(_des) == "Instance" and _des:IsA("BasePart") then _des = _des.CFrame end
		if not _speed or typeof(_speed) ~= "number" then _speed = 1 end
		if not _style  then _style = Enum.EasingStyle.Back end
		local _tween = TweenService:Create(_part, TweenInfo.new(_speed, _style), {CFrame = _des})
		_tween:Play()
		return _tween
	else
		warn("TweenPart: Bad Values...")
	end
end
