
local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

local Run = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local MyChar = Player.Character

local isChams, isPlayerCham

local ChamsFolder=CoreGui:FindFirstChild("Chams")
if not ChamsFolder then ChamsFolder=Instance.new("Folder",CoreGui)ChamsFolder.Name="Chams"end

local PlayerChams=ChamsFolder:FindFirstChild("PlayerChams")
local ItemChams=ChamsFolder:FindFirstChild("ItemChams")

if not PlayerChams then PlayerChams=Instance.new("Folder",ChamsFolder)PlayerChams.Name="PlayerChams"end
if not ItemChams then ItemChams=Instance.new("Folder",ChamsFolder)ItemChams.Name="ItemChams"end

local function GetCamera() -- Just in case some game renames the player's camera.
	return workspace:FindFirstChildOfClass("Camera")
end

local MyCam = GetCamera()

local function FindCham(Obj)
	for i, v in next, ItemChams:GetChildren() do if v.className == "ObjectValue" then
			if v.Value == Obj then return v.Parent end end end
	return nil
end

local function GetSizeOfObject(Obj)
	if Obj:IsA("BasePart") then
		return Obj.Size
	elseif Obj:IsA("Model") then
		return Obj:GetExtentsSize()
	end
end


getgenv().RemoveChams = function(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemChams
		if IsPlr then UseFolder = PlayerChams end

		local FindC = UseFolder:FindFirstChild(tostring(Obj)) or FindCham(Obj)
		if FindC then
			FindC:Destroy()
		end
	end task.wait()
end

getgenv().CreateChams = function(Obj)
	if Obj ~= nil then
		local IsPlr = Obj:IsA("Player")
		local UseFolder = ItemChams
		local Crap = nil
		local t = tick()
		if IsPlr then
			Obj =  Obj.Character
			UseFolder = PlayerChams
		end
		if Obj == nil then return end
		if IsPlr then Crap = Obj:GetChildren() else Crap = Obj:GetDescendants() end

		local FindC = ((IsPlr) and UseFolder:FindFirstChild(Obj.Name)) or FindCham(Obj)
		if not FindC then
			FindC = Instance.new("Folder", UseFolder)
			FindC.Name = Obj.Name
			local ObjVal = Instance.new("ObjectValue", FindC)
			ObjVal.Value = Obj
		end

		for _, P in next, Crap do
			if P:IsA("PVInstance") and P.Name ~= "HumanoidRootPart" then
				local Box = Instance.new("BoxHandleAdornment")
				Box.Size = GetSizeOfObject(P)
				Box.Name = "Cham"
				Box.Adornee = P
				Box.AlwaysOnTop = true
				Box.ZIndex = 5
				Box.Transparency = 0
				Box.Color3 = Color3.new(255,0,0)
				Box.Parent = FindC
			end
		end
	end
end

local function UpdateChams(Obj)
	if Obj == nil then return end

	if Obj:IsA("Player") then
		local Find = PlayerChams:FindFirstChild(Obj.Name)
		local GetChar = Obj.Character

		local Trans = 0
		if GetChar and MyChar then
			local GetHead = GetChar:FindFirstChild("Head")
			local GetTor = GetChar:FindFirstChild("HumanoidRootPart")
			local MyHead = MyChar:FindFirstChild("Head")
			local MyTor = MyChar:FindFirstChild("HumanoidRootPart")
			if GetHead and GetTor and MyHead and MyTor then
				if (MyTor.Position - GetTor.Position).magnitude > 2048 then
					Trans = 1
				else
					local Ray = Ray.new(MyCam.CFrame.p, (GetTor.Position - MyCam.CFrame.p).unit * 2048)
					local part = workspace:FindPartOnRayWithIgnoreList(Ray, {MyChar})
					if part ~= nil then
						if part:IsDescendantOf(GetChar) then
							Trans = 0.9
						else
							Trans = 0
						end
					end
				end
			end
		end

		if Find then
			for i, v in next, Find:GetChildren() do
				if v.className ~= "ObjectValue" then
					v.Color3 = Color3.new(255,0,0)
					v.Transparency = Trans
				end
			end
		end
	end
end

local AllPCon
local PCon = {}
getgenv().PlayerChamsOn = function()
	--Connections
	isPlayerCham = true
	AllPCon = Players.PlayerAdded:Connect(function(player)
		PCon[player.UserId] = player.CharacterAdded:Connect(function()
			RemoveChams(player)
			CreateChams(player)
		end)
	end)
	for _,v in pairs(Players:GetPlayers())do
		PCon[V.UserId] = v.CharacterAdded:Connect(function()
			RemoveChams(v)
			CreateChams(v)
		end)
		RemoveChams(v)
		CreateChams(v)
	end
	
	local succ, out = coroutine.resume(coroutine.create(function()
		while isPlayerCham do
			for _, v in next, Players:GetPlayers() do
				UpdateChams(v)
				Run.RenderStepped:Wait()
			end
		end
	end))
end

getgenv().PlayerChamsOff = function()
	isPlayerCham = false

	--Remove Connections
	if AllPCon then AllPCon:Disconnect()end
	for _,v in pairs(PCon)do
		v:Disconnect()
	end
end

local _temp = {}
getgenv().ChamsOff = function()
	isChams = false
	for _,v in pairs(_temp)do
		RemoveChams(v)
	end
end

getgenv().ChamsOn = function(_object)
	if _object then
		ChamsOff()
		_temp = {}
		isChams = false
		isChams = true
		if typeof(_object) == "Instance" then
			if _object:IsA("BasePart") then
				RemoveChams(_object)
				CreateChams(_object)
				table.insert(_temp, _object)
			end
			for _,v in pairs(_object:GetDescendants())do
				if v:IsA("BasePart") then
					RemoveChams(v)
					CreateChams(v)
					table.insert(_temp, v)
				end
			end
			
		elseif typeof(_object) == "table" then
			for _,v in pairs(_object)do
				RemoveChams(v)
				CreateChams(v)
				table.insert(_temp, v)
			end
		end
		local succ, out = coroutine.resume(coroutine.create(function()
			while isChams do
				for _,v in pairs(_temp)do
					print("Updating")
					UpdateChams(v)
					Run.RenderStepped:Wait()
				end
			end
		end))
	end
end

