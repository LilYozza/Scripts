w = library:CreateWindow("Main")


local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer
local RunService = game:GetService("RunService")

local Auto = w:CreateFolder("Auto")

-->Base Variables<--
local sCart
local CartList = {}

local sMap
local mapList = {"Classic", "Bluesteel", "Loopty "}

local _end = game:GetService("Workspace").End
local WinPad = _end.WinnersTeamer
local ToStart = _end.Teleport.Part

local blackCart = {}

--local Coins = game:GetService("Workspace").Coins
local folders = {}

for _, obj in ipairs(workspace:GetChildren()) do
    if obj.Name == "Folder" and obj:FindFirstChildWhichIsA("Model") then
        folders[#folders + 1] = obj
    end
end

local Coins = folders[1]
local Coins2 = folders[2]

local Worlds = Workspace:FindFirstChild("Worlds")
local Regen1 = Worlds.World1:FindFirstChild("RegenButtons")
local Regen2 = Worlds.World2:FindFirstChild("RegenButtons")

local RegenButtons = {table.unpack(Regen1:GetChildren()), table.unpack(Regen2:GetChildren())}

-->Non Return Functions<-
local function getRegen()
    local t = {}
    for _,v in pairs(RegenButtons) do
        local b = v:FindFirstChild("Button")
        table.insert(t, b)
    end
    return GetClosestPart(t)
end

local function SpawnCart(_sCart)
    if _sCart then 
        --local newName = string.match(_sCart, "^(%S+)")
        --local newName = string.gsub(_sCart, "^(%S+)%s+Cart", "%1")
        local newName = string.gsub(_sCart, "^Classic%s*", "")
        local newName = string.gsub(newName, "%s", "")

        newName = newName .. "_001"

        local r = getRegen().Parent
        --game:GetService("ReplicatedStorage"):WaitForChild("CanUseRegen"):InvokeServer(r)
        game:GetService("ReplicatedStorage").SpawnCart:InvokeServer(r, newName)
    end
end

local function GetAllCarts()
    local _Carts = game:GetService("ReplicatedStorage").Shop.Carts
    for _,v in pairs(_Carts:GetChildren())do
        table.insert(CartList, v)
    end
end

-->Return Functions<--


GetAllCarts()
local DropList = Auto:Dropdown("Select Car",CartList,true,function(sItem) --true/false, replaces the current title "Dropdown" with the option that t
    sCart = sItem
end)

Auto:Button("Spawn Cart",function()
    SpawnCart(sCart)
end)

Auto:Button("Win",function()
    local hum = Player.Character:WaitForChild("Humanoid")
    if hum and hum.Sit then
        Touch(WinPad)
    end
end)

Auto:Button("Start",function()
    Touch(ToStart)
end)

Auto:Button("Flip",function()
    game:GetService("ReplicatedStorage"):WaitForChild("FlipHandler"):WaitForChild("RemoteFunction"):InvokeServer()
end)


Auto:Toggle("Collect Coins",function(bool)
    shared.Toggle1=bool
    spawn(function()
        while shared.Toggle1 do
            for _, v in pairs({table.unpack(Coins:GetChildren()), table.unpack(Coins2:GetChildren())}) do
                local coin = v:FindFirstChild("HumanoidRootPart")
                local hum = Player.Character:WaitForChild("Humanoid")
                if shared.Toggle1 and coin and hum.Sit == true then Touch(coin) end
            end
            task.wait()
        end
    end)
end)

Auto:Toggle("Auto Win",function(bool)
    shared.Toggle2=bool
    spawn(function()
        while shared.Toggle2 do
            local hum = Player.Character:WaitForChild("Humanoid")
            if hum and shared.Toggle2 then
                if hum.Sit then
                    Touch(WinPad, 0.5)
                    hum.Sit = false
                    Touch(ToStart, 0.5)
                else
                    SpawnCart("Cart")
                end
            end
            task.wait(10)
        end
    end)
end)


Auto:Button("All Items",function()
    for _,v in pairs(_end:GetChildren()) do
        if v.Name == "Giver" then
            local _gpart = v:FindFirstChild("Touch")
            if _gpart then
                Touch(_gpart)
            end
        end
    end
end)


local DropList = Auto:Dropdown("Map Vote",mapList,true,function(sItem) --true/false, replaces the current title "Dropdown" with the option that t
    sMap = sItem
end)

Auto:Button("Vote",function()
    if sMap then
        local args = {
            [1] = sMap
        }
        for i=1,10,1 do
            game:GetService("ReplicatedStorage").Modules.MapVote.RemoteEvent:FireServer(unpack(args))
        end
    end
end)

local function toggleCart(_cart, _toggle)
    local driver = _cart:WaitForChild("Driver", 5)
    local hum = Player.Character:WaitForChild("Humanoid", 5)

    if (driver and driver.Occupant == hum) or table.find(blackCart, _cart) then if not table.find(blackCart, _cart) then table.insert(blackCart, _cart) end return end
    for _,v in pairs(_cart:GetDescendants()) do
        if v:IsA("BasePart") then
            v.CanCollide = _toggle
        end
    end
    return
end


local PCConnection
local LiveCarts = game:GetService ("Workspace").Carts
Auto:Toggle("No Collide",function(bool)
    shared.Toggle3=bool
    spawn(function()

        if shared.Toggle3 then
            PCConnection = RunService.Stepped:Connect(function()
                for _, player in pairs(Players:GetPlayers()) do
                    if player ~= Player and player.Character then
                        for _, v in pairs(player.Character:GetDescendants()) do
                            if v:IsA("BasePart") then
                                v.CanCollide = false
                            end
                        end
                    end
                end

                for _,v in pairs(LiveCarts:GetChildren()) do
                    toggleCart(v, false)
                end

            end)

        else
            PCConnection:Disconnect() PCConnection = nil
        end
    end)
end)

local _bool1 = false
Auto:Button("Stop/Go",function()
    spawn(function()
        _bool1 = not _bool1
        Player.Character:WaitForChild("HumanoidRootPart").Anchored = _bool1
    end)
end)






