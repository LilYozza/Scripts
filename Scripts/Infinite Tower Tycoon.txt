w = library:CreateWindow("Main")


local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

local Auto = w:CreateFolder("Auto")

-->Base Variables<--
local Tycoon
local sCollect
local Zones = game:GetService("Workspace").Zones

local Cash = Player.leaderstats.Cash

-->Non Return Functions<--
local function ClaimTycoon()
    local nilTycoon
    for _,v in pairs(Zones:GetChildren())do
        local claimVal = v:FindFirstChild("PlayerInside")
        if claimVal then
            if claimVal.Value == Player then
                Tycoon = v
                return
            end
            if claimVal.Value == nil then
                nilTycoon = v
            end
        end
    end
    if nilTycoon then
        Tycoon = v
        Touch(nilTycoon.TouchToClaimPart)
        MoveTo(nilTycoon.TouchToClaimPart)
    end
end 


repeat ClaimTycoon() task.wait(1) until Tycoon

-->Return Functions<--
local function findHeighestPart(_folder)
    local tempHeight = 0
    local tempPart
    for _,v in pairs(_folder:GetDescendants()) do
        if v:IsA("Part") and v.Position then
            if v.Position.y > tempHeight then
                tempPart = v
                tempHeight = v.Position.y
            end
        end
    end
    return tempPart
end


-->Post Variables<--
local CashGiver = Tycoon.AllModels.CashGiver.TouchPart

Auto:Toggle("Auto Collect",function(bool)
    shared.Toggle1=bool
    spawn(function()
        while shared.Toggle1 do
            MoveTo(CashGiver, Vector3.new(0,2,0), 1)
            Touch(CashGiver, 1)
            task.wait()
        end
    end)
end)

Auto:Toggle("Smart Collect",function(bool)
    sCollect=bool
end)

local AllButtons = game:GetService("Workspace").AllButtons
Auto:Toggle("Auto Buy",function(bool)
    shared.Toggle2=bool
    spawn(function()
        while shared.Toggle2 do
            for _,v in pairs(AllButtons:GetChildren())do
                local priceString = v:FindFirstChild("BillboardGui")
                if priceString then
                    if not shared.Toggle2 then
                        break
                    end
                    local priceLabel = priceString:FindFirstChild("Label")
                    local tempPrice = string.match(priceLabel.Text, "%$(%w+)")
                    local Price = fromSuffixString(tempPrice)
                    local toCollect = Tycoon.CashAvialable.Value

                    if sCollect and Price <= Cash.Value + toCollect then
                        MoveTo(CashGiver, Vector3.new(0,2,0), 1, 0.2)
                        Touch(CashGiver, 0.2)
                        MoveTo(v, Vector3.new(0,3,0), 1, 0.4)
                    elseif Price <= Cash.Value then
                        MoveTo(v, Vector3.new(0,3,0), 1, 0.2)
                    end
                end
            end
            task.wait()
        end
    end)
end)

local CrateFolder = game:GetService("Workspace").CrateFolder
local KeyFolder = game:GetService("Workspace").KeyFolder

Auto:Toggle("Auto Crate",function(bool)
    shared.Toggle3=bool
    spawn(function()
        while shared.Toggle3 do
            pcall(function()
                --local oldC = Player.Character:WaitForChild("HumanoidRootPart").CFrame
                for _,v in pairs(CrateFolder:GetChildren()) do
                    if v and v:FindFirstChild("ClickDetector") and shared.Toggle3 then
                        --Touch(v,1)
                        --MoveTo(v)
                        task.wait(0.5)
                        fireclickdetector(v.ClickDetector)

                    end
                end
                --Player.Character:WaitForChild("HumanoidRootPart").CFrame = oldC
            end)
            task.wait()
        end
    end)
end)

Auto:Toggle("Auto Key",function(bool)
    shared.Toggle5=bool
    spawn(function()
        while shared.Toggle5 do
            pcall(function()
                local HRP = Player.Character:WaitForChild("HumanoidRootPart")
                local oldC = HRP.CFrame
                for _,v in pairs(KeyFolder:GetChildren()) do
                    if v and v:FindFirstChild("ClickDetector") and shared.Toggle5 then
                        HRP.CFrame = v.CFrame
                        task.wait(0.1)
                        fireclickdetector(v.ClickDetector)
                        Touch(v)
                        HRP.CFrame = oldC
                        task.wait(1)
                        
                    end
                end
                --Player.Character:WaitForChild("HumanoidRootPart").CFrame = oldC
            end)
            task.wait()
        end
    end)
end)

Auto:Button("Top",function(bool)
    spawn(function()
        local heightPart = findHeighestPart(Tycoon)
        local newPos = Tycoon.BasePart.CFrame + Vector3.new(0,heightPart.Position.Y + 10,0)
        Player.Character:WaitForChild("HumanoidRootPart").CFrame = newPos
    end)
end)

Auto:Button("Home",function(bool)
    MoveTo(Tycoon.BasePart)
end)

Auto:Button("Lasers/Doors",function(bool)
    local s, e = pcall(function()
        for _,v in pairs(Zones:GetDescendants()) do
            if v:IsA("TouchTransmitter") then
                if v.Parent and string.match(v.Parent.Name, "KillPart") and v.Parent:IsA("Part") then
                    v.Parent.BrickColor = BrickColor.new("Lime green")
                    v:Destroy()
                end
            end
            if string.find(v.Name, "Sliding doors") then
                v:Destroy()
            end
        end
    end)
    print(s,e)
end)

local Gamepasses = Player.Stats.GamePass
Auto:Button("Gamepasses",function(bool)
    spawn(function()
        for _,v in pairs(Gamepasses:GetChildren())do
            if v:IsA("BoolValue") then
                v.Value = true
            end
        end
    end)
end)

local selectedItem
local ItemList = {}
local function GetAllTouchParts()
    local tbl = {}
    for _,v in pairs(Tycoon.AllModels:GetDescendants())do
        if v:IsA("TouchTransmitter") then 
            table.insert(tbl, v.Parent.Parent)
        end
    end
    return tbl
end

local function FindTouchPart(_p)
    for _,v in pairs(_p:GetDescendants()) do
        if v:IsA("TouchTransmitter") then
            return v.Parent
        end
    end
end


ItemList = GetAllTouchParts()
local DropList = Auto:Dropdown("Select Item",ItemList,true,function(SItem) --true/false, replaces the current title "Dropdown" with the option that t
    selectedItem = FindInTable(ItemList, SItem)
    selectedItem = FindTouchPart(selectedItem)
    
    if not selectedItem then print("Couldnt Find") end
end)

Auto:Button("Give Item",function(bool)
    spawn(function()
        if selectedItem then
            MoveTo(selectedItem, nil, true, 0.2)
            --Touch(selectedItem)
        end
    end)
end)







