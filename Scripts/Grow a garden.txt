w = library:CreateWindow("Main")


local VirtualUser = game:GetService("VirtualUser")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

-- GAME EVENTS --
local Poppy = Workspace:WaitForChild("Poppy", 2)
if Poppy then EasterEvent = w:CreateFolder("EasterEvent") end

local SeedPack = Workspace:WaitForChild("SeedPack", 2)
if SeedPack then SeedPackEvent = w:CreateFolder("SeedPack Event") end

local NightEvent = Workspace:WaitForChild("NightEvent", 2)
if NightEvent then eNightEvent = w:CreateFolder("Night Event") end

---------------------------------------------

local Auto = w:CreateFolder("Auto")
local Plant = w:CreateFolder("Plant")
local Shop = w:CreateFolder("Shop")

local EasterEvent


-->Base Variables<--
local pMoney = Player:WaitForChild("leaderstats"):FindFirstChild("Sheckles")
local NPCS = Workspace:WaitForChild("NPCS")
local Farm = Workspace:WaitForChild("Farm")

local Steven = NPCS:FindFirstChild("Steven")

local Seed_Models = ReplicatedStorage:WaitForChild("Seed_Models")
local Gear_Models = ReplicatedStorage:WaitForChild("ObjectModels")

local seedItems = SortTableByName(Seed_Models:GetChildren())
local gearItems = SortTableByName(Gear_Models:GetChildren())

local sItem1 = seedItems[1]
local sItem2 = gearItems[1]

local blacklistPlant = {}

local Easter_Shop, SeedSack_UI
local questGui = Player.PlayerGui:WaitForChild("DailyQuests_UI")
local gearShop = Player.PlayerGui:WaitForChild("Gear_Shop")
local seedShop = Player.PlayerGui:WaitForChild("Seed_Shop")




-->Non Return Functions<--
local function checkString(input)
    local result = input
    for i = 2, #input do
        if input:sub(i, i):match("%u") then
            if input:sub(i-1, i-1) ~= " " then
                result = result:sub(1, i-1) .. " " .. result:sub(i)
                break
            end
        end
    end
    return result
end

local function buySeed(_item, _amt)
    _amt = _amt or 1
    for i = 1, _amt do
        --print("Buying:", _item)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(_item)
        if Poppy then
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyEasterStock"):FireServer(_item) --ME being Lazy lol
        end
    end
    
    return
end

local function buyGear(_item, _amt)
    _item = checkString(_item)
    _amt = _amt or 1
    for i = 1, _amt do
        --print("Buying:", _item)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(_item)
    end
    
    return
end

local function plantItem(_pos, _item)
    --ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer({_pos, _item})
    local args = {
        [1] = _pos,
        [2] = _item
    }

    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Plant_RE"):FireServer(unpack(args))
    --print("Planted:", _pos, _item)
    return
end

local function sellAll()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    return
end

local function getWeight()
    local total = 0
    for _,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        local weight = v:FindFirstChild("Weight")
        if weight then
            total = total + weight.Value
        end
    end
    return total
end

-->Return Functions<--
local function getFarm(_player)
    for _,v in pairs(Farm:GetChildren()) do
        local owner = v.Important.Data:FindFirstChild("Owner")
        if owner and owner.Value == _player.Name then
            return v
        end
    end
    return
end

local function getSeeds(_name)
    -- Check Current Hand or Backpack
    local tool = Player.Character:FindFirstChildWhichIsA("Tool")
    if tool and tool.Name:find("Seed") and not MatchTable(blacklistPlant, tool.Name) then
        return tool
    else
        for _, v in pairs(Player.Backpack:GetChildren()) do
            if v:IsA("Tool") and v.Name:find("Seed") and not MatchTable(blacklistPlant, v.Name) then
                return v
            end
        end
    end
    return
end

local function getPlant(_name, _weight)
    _weight = _weight or 0
    _name = _name:gsub("%[", "%%["):gsub("%]", "%%]")

    -- Check hand
    local tool = Player.Character:FindFirstChildWhichIsA("Tool")
    if tool and (not _name or tool.Name:match(_name)) then
        -- Check if the weight is greater than the specified weight
        if tool:FindFirstChild("Weight") and tool.Weight.Value > _weight then
            return tool
        end
    end

    -- Check backpack
    for _, v in pairs(Player.Backpack:GetChildren()) do
        if v:IsA("Tool") and (not _name or v.Name:match(_name)) then
            -- Check if the weight is greater than the specified weight
            if v:FindFirstChild("Weight") and v.Weight.Value > _weight then
                return v
            end
        end
    end

    return
end

local function checkStock(_seed) --Input String
    local Seed_Shop = Player.PlayerGui:FindFirstChild("Seed_Shop")
    if Seed_Shop then
        local plant = Seed_Shop.Frame.ScrollingFrame:FindFirstChild(_seed)
        if not plant and Easter_Shop then plant = Easter_Shop.Frame.ScrollingFrame:FindFirstChild(_seed) end
        if plant then
            local Stock = fromSuffixString(plant.Main_Frame.Stock_Text.Text)
            local Price = fromSuffixString(plant.Main_Frame.Cost_Text.Text)

            return Stock, Price
        end
    end
    return 0
end

-- POST VARIABLES
local pFarm = getFarm(Player)
local spawnPoint = pFarm:FindFirstChild("Spawn_Point")
local Important = pFarm:FindFirstChild("Important")

local Plant_Locations = Important:FindFirstChild("Plant_Locations")
local Plants_Physical = Important:FindFirstChild("Plants_Physical")

local function getGridPoints(rows, columns, margin)
    local points = {}
    for _,v in pairs(Plant_Locations:GetChildren()) do
        if v:IsA("BasePart") then
            local surfaceSize = Vector2.new(v.Size.X, v.Size.Z)
            local cellWidth = (surfaceSize.X - margin * 2) / columns
            local cellHeight = (surfaceSize.Y - margin * 2) / rows

            for row = 0, rows - 1 do
                for col = 0, columns - 1 do
                    local x = v.Position.X - surfaceSize.X / 2 + margin + cellWidth / 2 + col * cellWidth
                    local z = v.Position.Z - surfaceSize.Y / 2 + margin + cellHeight / 2 + row * cellHeight
                    local y = v.Position.Y + v.Size.Y / 2 -- top surface
                    table.insert(points, Vector3.new(x, y, z))
                end
            end
        end
    end
	return points
end

local function checkPos(_pos)
	for _, v in pairs(Plants_Physical:GetChildren()) do
		local pos1 = v:FindFirstChild("1")
		if pos1 then
			local p1 = Vector3.new(pos1.Position.X, 0, pos1.Position.Z)
			local p2 = Vector3.new(_pos.X, 0, _pos.Z)
			if (p1 - p2).Magnitude <= 1 then
				return false
			end
		end
	end
	return true
end

local points = getGridPoints(20,10,0)

--=================================== Night EVENT ===================================
if NightEvent then
Night_Shop = Player.PlayerGui:FindFirstChild("NightEventShop_UI")
Night_Event = Player.PlayerGui:FindFirstChild("NightQuest_UI")


eNightEvent:Button("Night Shop",function()
    spawn(function()
        Night_Shop.Enabled = not Night_Shop.Enabled
    end)
end)

eNightEvent:Button("Night Event",function()
    spawn(function()
        Night_Event.Enabled = not Night_Event.Enabled
    end)
end)

eNightEvent:Button("Sell All",function()
    spawn(function()
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent"):FireServer("SubmitAllPlants")
    end)
end)

eNightEvent:Toggle("Auto Sell",function(bool)
    shared.ToggleNEAS=bool
    spawn(function()
        while shared.ToggleNEAS do
            -- CHECK PLAYER INV
            local plant = getPlant("Moonlit")
            if plant then
                if plant.Parent ~= Player.Character then plant.Parent = Player.Character task.wait(0.3) end
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("NightQuestRemoteEvent"):FireServer("SubmitAllPlants")
            end
            task.wait(0.3)
        end
    end)
end)

end

--=================================== EASTER EVENT ===================================

if Poppy then
Easter_Shop = Player.PlayerGui:FindFirstChild("Easter_Shop")
EasterEvent:Button("Easter Shop",function()
    spawn(function()
        Easter_Shop.Enabled = not Easter_Shop.Enabled
    end)
end)


  
EasterEvent:Button("Sell All",function()
    spawn(function()
        local plant = getPlant("Gold")
        if plant then
            if plant.Parent ~= Player.Character then plant.Parent = Player.Character task.wait(0.3) end
            ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("EasterShopService"):FireServer("SubmitHeldPlant")
        end
    end)
end)


EasterEvent:Toggle("Auto Sell",function(bool)
    shared.ToggleEEAS=bool
    spawn(function()
        while shared.ToggleEEAS do
            -- CHECK PLAYER INV
            local plant = getPlant("Gold")
            if plant then
                if plant.Parent ~= Player.Character then plant.Parent = Player.Character task.wait(0.3) end
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("EasterShopService"):FireServer("SubmitHeldPlant")
            end
            task.wait(0.3)
        end
    end)
end)
end
--=============================================================================================

--=================================== SEED PACK GIVER EVENT ===================================
if SeedPack then
SeedSack_UI = Player.PlayerGui:FindFirstChild("FreeSeedSack_UI")
local DataService = ReplicatedStorage.Modules.DataService
local mData = require(DataService)

local function toString(...)
    local s = {...}
    return tostring(s[1]) .. "  " .. tostring(s[2])
end

local function getInfo()
    local pData = mData:GetData()
    local pInfo = pData.SeedPackGiverInfo.RequiredPlantInfo

    local plant = pInfo.RequiredPlant
    local mutation = pInfo.RequiredPlantMutation or false
    if mutation then 
        plant =  "[" .. tostring(mutation).. "] " .. tostring(pInfo.RequiredPlant)
    end

    return  plant, pInfo.RequiredPlantSize
end

SeedPackEvent:Button("Open Event",function()
    spawn(function()
        SeedSack_UI.Enabled = not SeedSack_UI.Enabled
    end)
end)

local label1 = SeedPackEvent:Label(toString(getInfo()),{
    TextSize = 25; -- Self Explaining
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})

task.spawn(function()
    while true do
        label1:Refresh(toString(getInfo()))
        task.wait(1)
    end
end)


SeedPackEvent:Button("Give Plant",function()
    spawn(function()
        local plant = Player.Character:FindFirstChildWhichIsA("Tool")
        if plant then
           ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SeedPackGiverEvent"):FireServer("SubmitHeldPlant")
        end
    end)
end)

SeedPackEvent:Toggle("Auto Give",function(bool)
    shared.ToggleEPAG=bool
    spawn(function()
        while shared.ToggleEPAG do
            -- CHECK PLAYER INV
            local rPlant, rSize = getInfo()
            local plant = getPlant(rPlant, rSize)
            if plant then
                if plant.Parent ~= Player.Character then plant.Parent = Player.Character task.wait(0.3) end
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SeedPackGiverEvent"):FireServer("SubmitHeldPlant")
            end
            task.wait(5)
        end
    end)
end)

SeedPackEvent:Toggle("Spam Give",function(bool)
    shared.ToggleEPSG=bool
    spawn(function()
        while shared.ToggleEPSG do
            -- CHECK PLAYER INV
            local rPlant, rSize = getInfo()
            local plant = getPlant(rPlant, rSize)
            if plant then
                if plant.Parent ~= Player.Character then plant.Parent = Player.Character task.wait(0.3) end
                ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("SeedPackGiverEvent"):FireServer("SubmitHeldPlant")
            end
            task.wait(0.1)
        end
    end)
end)


end
--=============================================================================================

Auto:Button("Home",function()
    spawn(function()
        MoveTo(spawnPoint, Vector3.new(0,5,0))
    end)
end)

Auto:Button("Seed Shop",function()
    spawn(function()
        seedShop.Enabled = not seedShop.Enabled
    end)
end)

Auto:Button("Gear Shop",function()
    spawn(function()
        gearShop.Enabled = not gearShop.Enabled
    end)
end)

Auto:Button("Quests",function()
    spawn(function()
        questGui.Enabled = not questGui.Enabled
    end)
end)

Auto:Button("Sell",function()
    spawn(function()
-- Get the button instance
        local back = GetPos()
        MoveTo(Steven.HumanoidRootPart, Vector3.new(-5, 0 ,0)) task.wait(0.3)
        sellAll() task.wait()
        MoveTo(back)
    end)
end)
local sWeight = 50

Auto:Toggle("Auto Harvest", function(bool)
    shared.ToggleAH = bool
    spawn(function()
        while shared.ToggleAH do
            if sWeight > getWeight() then
                for _, v in pairs(Plants_Physical:GetChildren()) do
                    for __, _v in pairs(v:GetDescendants()) do
                        if _v and _v:IsA("ProximityPrompt") then
                            -- Fire in parallel to prevent backlogging
                            task.spawn(function()
                                fireproximityprompt(_v)
                            end)
                        end
                    end
                end
            end
            task.wait(0.5) -- Slight wait to avoid excessive CPU load
        end
    end)
end)


Auto:Toggle("Auto Buy",function(bool)
    shared.ToggleAB=bool
    spawn(function()
        while shared.ToggleAB do
            for _,v in pairs(seedItems) do
                if not shared.ToggleAB then break end
                local stock, price = checkStock(v.Name)
                if stock and stock > 0 and price and price <= pMoney.Value then
                    buySeed(v.Name) task.wait(0.3)
                end
            end
            task.wait()
        end
    end)
end)



Auto:Slider("Sell At Weight",{
    min = 1;
    max = 50;
    precise = true; -- max 2 decimals
},function(value) sWeight = value end)

Auto:Toggle("Auto Sell",function(bool)
    shared.ToggleAS=bool
    spawn(function()
        while shared.ToggleAS do
            if sWeight <= getWeight() then
                local back = GetPos()
                MoveTo(Steven.HumanoidRootPart, Vector3.new(-5, 0 ,0)) task.wait(1)
                sellAll() MoveTo(back)
                task.wait(1)
            end
            task.wait(1)
        end
    end)
end)

Auto:Button("Toggle Grid",function()
    spawn(function()

        local grid = Workspace:FindFirstChild("Grid")
        if grid then grid:Destroy()
        else
            grid = Instance.new("Folder")
            grid.Parent = Workspace
            grid.Name = "Grid"
            for _,v in pairs(Workspace:GetChildren()) do
                if v.Name == "Part" and v.Color == Color3.fromRGB(255, 0, 0) then
                    v:Destroy()
                end
            end

            for _, pos in pairs(points) do
                local dot = Instance.new("Part")
                dot.Size = Vector3.new(0.2, 0.2, 0.2)
                dot.Anchored = true
                dot.Position = pos + Vector3.new(0, 0.1, 0)
                dot.Color = Color3.fromRGB(255, 0, 0)
                dot.Parent = grid
            end        
        end

    end)

end)

local plantSelect
local PlantList = Plant:Dropdown("Select Seed",seedItems,true,function(SItem) --true/false, replaces the current title "Dropdown" with the option that t
    plantSelect = SItem
end)

Plant:Button("BlackList",function()
    spawn(function()
        if plantSelect and not table.find(blacklistPlant, plantSelect) then
            table.insert(blacklistPlant, plantSelect)
        end
    end)
end)


Plant:Toggle("Auto Plant",function(bool)
    shared.ToggleAP = bool
    spawn(function()
        while shared.ToggleAP do
            local seed = getSeeds()
            if seed then
                if seed.Parent ~= Player.Character then
                    seed.Parent = Player.Character
                    task.wait(0.3)
                end

                for _, pos in pairs(points) do
                    if not shared.ToggleAP then return end
                    
                    local match = seed.Name:match("^(.-)%s*Seed")
                    if match and checkPos(pos + Vector3.new(0, 0.1, 0)) then
                        plantItem(pos, match)
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end)

Plant:Toggle("Plant Hand", function(bool)
    shared.TogglePH = bool
    spawn(function()
        while shared.TogglePH do
            local tool = Player.Character:FindFirstChildWhichIsA("Tool")
            if tool then
                -- Check if the tool's name matches the seed pattern
                local match = tool.Name:match("^(.-)%s*Seed")
                if match then
                    -- If it matches, use the seed's parent
                    local seed = tool.Parent
                    for _, pos in pairs(points) do
                        if not shared.TogglePH then return end
                        if checkPos(pos + Vector3.new(0, 0.1, 0)) then
                            plantItem(pos, match)
                        end
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end)

local DropList1 = Shop:Dropdown(sItem1.Name,seedItems,true,function(SItem) --true/false, replaces the current title "Dropdown" with the option that t
    sItem1 = SItem
end)

Shop:Button("Buy",function()
    spawn(function()
        buySeed(sItem1)
    end)
end)

local DropList2 = Shop:Dropdown(sItem2.Name,gearItems,true,function(SItem) --true/false, replaces the current title "Dropdown" with the option that t
    sItem2 = SItem
end)

Shop:Button("Buy",function()
    spawn(function()
        buyGear(sItem2)
    end)
end)
