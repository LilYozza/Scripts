local rs = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local DataService = require(rs:WaitForChild("Modules"):WaitForChild("DataService"))
local ALLDATA = DataService:GetData()

w = library:CreateWindow("Main")
local Auto = w:CreateFolder("Main")
local StockMenu = w:CreateFolder("Stock")
local SPMenu = w:CreateFolder("Season Pass")

local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

print("v4")

-->Base Variables<--
local function Sheckles() return ALLDATA.Sheckles end

local Farms = Workspace:WaitForChild("Farm")
local NPCS = Workspace:WaitForChild("NPCS")
local PGui = Player.PlayerGui

local Steven = NPCS:WaitForChild("Steven")

local GameEvents = rs:WaitForChild("GameEvents")
local mod = GameEvents:WaitForChild("Crops"):WaitForChild("Collect")

--Seed Types
local __seeds = {name = "seeds", path = PGui:WaitForChild("Seed_Shop")}
local __dailySeeds = {name = "daily", path = PGui:WaitForChild("Seed_Shop")}
local __gears = {name = "gears", path = PGui:WaitForChild("Gear_Shop")}
local __eggs = {name = "eggs", path = PGui:WaitForChild("PetShop_UI")}
local __merchant = {name = "merchant", path = PGui:WaitForChild("TravelingMerchantShop_UI")}

-- EVENTS
local Interaction = Workspace:WaitForChild("Interaction")
local UpdateItems = Interaction:WaitForChild("UpdateItems")

-->Non Return Functions<--
local function getFarm()
    for _,v in pairs(Farms:GetChildren())do
        local Important = v:FindFirstChild("Important")
        if Important then
            local Owner = Important:WaitForChild("Data"):WaitForChild("Owner")
            if Owner and Owner.Value == Player.Name then
                return v
            end
        end
    end
end

--Post Variables
local Farm = getFarm()
local Important = Farm:WaitForChild("Important")
local Plants_Physical = Important:WaitForChild("Plants_Physical")

local function getInventoryCount()
    local amt = {}
    for i, v in ALLDATA.InventoryData do
        if v.ItemType == "Holdable" and v.ItemData then
            table.insert(amt, v)
        end
    end
    return #amt
end

local function checkPlantInventory(_plant, _mutations)
	for _, v in pairs(ALLDATA.InventoryData) do
		local data = v.ItemData
		if v.ItemType == "Holdable" and data and string.lower(data.ItemName) == string.lower(_plant) and data.IsFavorite == false  then
			local str = string.lower(data.MutationString or "")
			for _, m in ipairs(_mutations) do
				if not str:find(string.lower(m)) then return end
			end
			return v
		end
	end
end

local function checkPlant(_plant, _name, _mutations)
    local plantDone = _plant:GetAttribute("DoneGrowTime")
    if plantDone then
        if _name and _plant.Name:lower() ~= _name:lower() then return end -- PLANT TYPE CHECKER
        if _mutations and _mutations[1] then 
            for _, m in ipairs(_mutations) do
                if not _plant:GetAttribute(m) then return end
            end
        end -- MUTATION CHECKER
        return _plant
    end
end


local function checkPlantGarden(_name, _mutations)
    for _,v in pairs(Plants_Physical:GetChildren())do
        local Fruits = v:FindFirstChild("Fruits")
        if Fruits then
            for __,_v in pairs(Fruits:GetChildren())do
                local find = checkPlant(_v, _name, _mutations)
                if find then return find end
            end
        else
            local find = checkPlant(v, _name, _mutations)
            if find then return find end
        end
    end
end


local function IsMaxInventory()
    local count = getInventoryCount()
    local bonus = Player:GetAttribute("BonusBackpackSize")
    if 199 + (bonus or 0) > count then
        return false
    else
        return true
    end
end

local function CollectPlant(_plant, _name, _mutations)
    local plant = checkPlant(_plant, _name, _mutations)
    if plant then mod:FireServer({plant}) task.wait() end
end

local function getStockInfo(_item)
    local t = {
        name = _item.Parent.Name,
        price = fromSuffixString(_item.Cost_Text.Text),
        stock = fromSuffixString(_item.Stock_Text.Text)
    }
    return t
end

local function getSeedInfo(_item) -- FOR DAILY SEEDS
    local price = _item:WaitForChild("PurchaseButton"):WaitForChild("Main"):WaitForChild("Price")
    local t = {
        name = _item.Name,
        price = fromSuffixString(price.Text),
        stock = fromSuffixString(_item.StockNum.Text)
    }
    return t
end

--SAFARI EVENT ------------------------------------------------------------------------------------------------------------------------
local SafariEvent = UpdateItems:WaitForChild("SafariEvent", 5)
if SafariEvent then
   local EventMenu = w:CreateFolder("Safari")
   local EventShop = ALLDATA.EventShopStock

    local function buyEventStock(_name, _type)
        for _,v in pairs(_type.Stocks) do
            if v.Stock > 0 then
                --if v.UnlockedShopItems and v.UnlockedShopItems[1] and FindInTable(v.UnlockedShopItems, _name) then
                print("Buying: x" .. v.Stock, _, "Type:", _name)
                for i = 1, v.Stock do
                    GameEvents:WaitForChild("BuyEventShopStock"):FireServer(_, _name) task.wait(0.1)
                end
            end
        end
    end

    EventMenu:Button("Submit Hand",function()
        spawn(function()
            GameEvents:WaitForChild("SafariEvent"):WaitForChild("Safari_SubmitItemRE"):FireServer(Player)
        end)
    end)
    EventMenu:Button("Submit All",function()
        spawn(function()
            GameEvents:WaitForChild("SafariEvent"):WaitForChild("Safari_SubmitAllRE"):FireServer(Player)
        end)
    end)

    EventMenu:Toggle("Auto Submit",function(bool)
        shared.ToggleEAS=bool
        spawn(function()
            while shared.ToggleEAS do
                if IsMaxInventory() then
                     GameEvents:WaitForChild("SafariEvent"):WaitForChild("Safari_SubmitAllRE"):FireServer(Player)
                end
                task.wait(1)
            end
        end)
    end)

    EventMenu:Toggle("Buy Shop",function(bool)
        shared.ToggleEBS=bool
        spawn(function()
            while shared.ToggleEBS do
                    buyEventStock("Safari Shop", EventShop['Safari Shop'])
                task.wait(1)
            end
        end)
    end)

end

--------------------------------------------------------------------------------------------------------------------------------------

local function buySeed(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuySeedStock"):FireServer("Shop", _item) task.wait(0.1)
    end
end
local function buyDailySeed(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyDailySeedShopStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyGear(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyGearStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyEgg(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyPetEgg"):FireServer(_item) task.wait(0.1)
    end
end

local function buyMerchant(_item, _amt)
    --print("Buying: x" .. _amt, _item)
    for i = 1, _amt do
        GameEvents:WaitForChild("BuyTravelingMerchantShopStock"):FireServer(_item) task.wait(0.1)
    end
end
local function buyAllStock(_type)
    local type = _type.name
    local _frame = _type.path:WaitForChild("Frame")
    local list = _frame:WaitForChild("ScrollingFrame")
    for _,v in pairs(list:GetChildren())do
        local mFrame = v:FindFirstChild("Main_Frame")
        if v:IsA("Frame") and mFrame then
            local info = getStockInfo(mFrame)
            if info.stock > 0 and Sheckles() >= info.price then
                if type == "seeds" then
                    buySeed(info.name, info.stock)
                elseif type == "gears" then
                    buyGear(info.name, info.stock)
                elseif type == "eggs" then
                    buyEgg(info.name, info.stock)
                elseif type == "merchant" then
                    buyMerchant(info.name, info.stock)
                end
            end
        end
    end
end

local function buyDaily()
    local shop = PGui:WaitForChild("Seed_Shop")
    local mFrame = shop:WaitForChild("Daily"):WaitForChild("ScrollingFrame")
    local seeds = {}
    for _,v in pairs(mFrame:GetChildren())do
        local bestDeal = v:FindFirstChild("SeedName")
        if bestDeal then
            local info = getSeedInfo(v)
            if info.stock > 0 and Sheckles() >= info.price then
                buyDailySeed(info.name, info.stock)
            end
        end
        if v.Name == "Seeds" then
            for __,_v in pairs(v:GetChildren())do
                local deal = _v:FindFirstChild("SeedName")
                if _v:IsA("Frame") and deal then
                    local info = getSeedInfo(_v)
                    if info.stock > 0 and Sheckles() >= info.price then
                        buyDailySeed(info.name, info.stock)
                    end
                end
            end
        end
    end
end

local function TeleportTo(_place)
    GameEvents:WaitForChild("PlayerTeleportTriggered"):FireServer(_place)
end

local function SellAll()
    GameEvents:WaitForChild("Sell_Inventory"):FireServer()
end



Auto:Toggle("Auto Harvest",function(bool)
    shared.ToggleAH=bool
    spawn(function()
        while shared.ToggleAH do
            if not IsMaxInventory() then
                for _,v in pairs(Plants_Physical:GetChildren())do
                    if v:GetAttribute("DoneGrowTime") then
                        local fruitCheck = v:FindFirstChild("Fruit_Spawn")
                        if fruitCheck then
                            local Fruits = v:FindFirstChild("Fruits")
                            if Fruits then
                                for __,_v in pairs(Fruits:GetChildren())do
                                    if shared.ToggleAH and not IsMaxInventory() then CollectPlant(_v) end
                                end 
                            end
                        else
                            if shared.ToggleAH and not IsMaxInventory() then CollectPlant(v) end
                        end
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end)

local moveBack = false
-->Return Functions<--
Auto:Toggle("Auto Sell",function(bool)
    shared.ToggleAS=bool
    spawn(function()
        while shared.ToggleAS do
            if IsMaxInventory() then
                local samHRP = Steven:FindFirstChild("HumanoidRootPart")
                local distance = GetDistance(samHRP)
                local old = GetPos()
                if distance > 10 then
                    local hrp = GetHrp()
                    
                    local direction = (hrp.Position - samHRP.Position).Unit
                    local newPosition = samHRP.Position + direction * 5
                    local facingCFrame = CFrame.lookAt(newPosition, samHRP.Position)

                    MoveTo(facingCFrame) task.wait(1)
                end
                SellAll()
                if moveBack then task.wait(1) MoveTo(old) end
                task.wait(5)
            end
            task.wait(1)
        end
    end)
end)

Auto:Toggle("TeleportBack",function(bool)
    shared.ToggleTB=bool
    spawn(function()
        moveBack = shared.ToggleTB
    end)
end)

Auto:Button("Ascend",function()
    spawn(function()
        local rebirthData = ALLDATA.RebirthData.RequiredPlants[1] or nil
        if rebirthData then
            local plant = rebirthData.FruitName
            local mutations = rebirthData.Mutations
            print(plant, mutations[1])
            -- Find PLant / Inventory / Garden
            local crop = checkPlantInventory(plant, mutations)
            if not crop then
                crop = checkPlantGarden(plant, mutations)
                if crop and not IsMaxInventory() then
                    CollectPlant(crop) task.wait(1)
                    crop = checkPlantInventory(plant, mutations)
                end
            end
            if crop then
                local hum = Player.Character:WaitForChild("Humanoid")
                hum:EquipTool(crop) task.wait(0.3)
                GameEvents:WaitForChild("BuyRebirth"):FireServer()
                print("Yes")
            end
        end
    end)
end)

Auto:Button("Remove Farms",function()
    spawn(function()
        for _,v in pairs(Farms:GetChildren()) do
            if v ~= Farm then v:Destroy() end
        end
    end)
end)


Auto:Button("Other",function()
    spawn(function()
        loadstring(game:HttpGet('https://zaphub.xyz/Exec'))()
    end)
end)

StockMenu:Toggle("Buy Seeds",function(bool)
    shared.ToggleBS=bool
    spawn(function()
        while shared.ToggleBS do
            buyAllStock(__seeds)
            buyDaily()
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Gears",function(bool)
    shared.ToggleBG=bool
    spawn(function()
        while shared.ToggleBG do
            buyAllStock(__gears)
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Eggs",function(bool)
    shared.ToggleBE=bool
    spawn(function()
        while shared.ToggleBE do
            buyAllStock(__eggs)
            task.wait(1)
        end
    end)
end)

StockMenu:Toggle("Buy Merchant",function(bool)
    shared.ToggleBM=bool
    spawn(function()
        while shared.ToggleBM do
            buyAllStock(__merchant)
            task.wait(1)
        end
    end)
end)

local SeasonPassUI = PGui:WaitForChild("SeasonPassUI")
local function getInfButton()
    local Rewards = SeasonPassUI:WaitForChild("SeasonPassFrame"):WaitForChild("Main"):WaitForChild("Rewards"):WaitForChild("ScrollingFrame"):WaitForChild("Rewards")
    local btn = Rewards:WaitForChild("InfReward"):WaitForChild("Image"):WaitForChild("ClaimInfReward")
    if btn then return btn end
    return false
end

local infiniteBtn = getInfButton()
SPMenu:Toggle("Auto Claim",function(bool)
    shared.ToggleSPAC=bool
    spawn(function()
        while shared.ToggleSPAC do
            if not infiniteBtn then infiniteBtn = getInfButton() end
            if infiniteBtn and infiniteBtn.BackgroundColor3 == Color3.fromRGB(55, 237, 41) then
                GameEvents:WaitForChild("SeasonPass"):WaitForChild("ClaimSeasonPassInfReward"):FireServer(51, false)             
            end
            task.wait(1)
        end
    end)
end)

-- DYNAMIC WAY TO GET NEW SEASON
local lastKey, lastValue
for k, v in pairs(ALLDATA.SeasonPass) do
	lastKey, lastValue = k, v
end

local SeasonPassData = ALLDATA.SeasonPass[lastKey]
SPMenu:Toggle("Auto Buy",function(bool)
    shared.ToggleSPAB=bool
    spawn(function()
        while shared.ToggleSPAB do
            for _,v in pairs(SeasonPassData.Stocks) do
                if v.Stock > 0 then
                    print("Buying: x" .. v.Stock, _, "Type:", _)
                    for i = 1, v.Stock do
                        GameEvents:WaitForChild("SeasonPass"):WaitForChild("BuySeasonPassStock"):FireServer(_) task.wait(0.1)
                    end
                end
            end
            task.wait(1)
        end
    end)
end)


