w = library:CreateWindow("Main")


local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

local Auto = w:CreateFolder("Auto")
local Egg = w:CreateFolder("Egg")

-->Base Variables<--
local argsRB = {
    [1] = "AttemptRebirth_7423994890",
    [2] = "BDC35807-9424-4041-9D2C-3F0408FFD67B"
}

-- Script generated by SimpleSpy - credits to exx#9394

local argsAC = {
    [1] = "Punch/Click_7423994890",
    [2] = "B8ED61EE-9628-4C35-9224-79B851618799"
}

local Worlds = game:GetService("Workspace").Worlds

local EnemiesList = {}
-->Non Return Functions<--
local function GetEnemies(_tbl)
    for _,v in pairs(Worlds:GetChildren()) do
        local Gameplay = v:FindFirstChild("Gameplay")
        if Gameplay then
            local Enemies = Gameplay:FindFirstChild("Enemies")
            if Enemies then
                for __,_v in pairs(Enemies:GetChildren()) do
                    table.insert(_tbl, _v)
                end
            end
        end
    end
end 

local function sortTable(_tbl)
    table.sort(_tbl, function(a, b)
        local numA = tonumber(a.Name:match("%d+$")) or 0
        local numB = tonumber(b.Name:match("%d+$")) or 0
        return numA < numB
    end)
end


GetEnemies(EnemiesList)
sortTable(EnemiesList)

local function getMapOld()
    local closestW = 0
    local closestP
    for _,v in pairs(Worlds:GetChildren())do
        if string.find(v.Name, "World") then
            local Base = v.Map.Base:FindFirstChild("Base")
            if Base then
                local dis = GetDistance(Base)
                if dis < closestP then
                    closestW = v
                end
            end
        end
    end
    return closestP
end

local function getMap()
    for _,v in pairs(Worlds:GetChildren())do
        local Baseplate = v.Map:FindFirstChild("Baseplate")
        if Baseplate and Baseplate:FindFirstChild("Base") then
            return v
        end
    end
end

print(getMap().Name)


-->Return Functions<--
local function findNextEnemy()
    local bestStrength
    local pStrength = Player.leaderstats["ðŸ’ª Strength"]
    local pWorld = getMap()
    for _,v in pairs(EnemiesList) do
        if v:FindFirstChild("MeshRig") then
            local EnemyTagX = v.MeshRig:FindFirstChild("EnemyTagX") or v.Rig:FindFirstChild("EnemyTag")
            local RStrength = EnemyTagX.StrengthFrame.Strength.Text
            if fromSuffixString(RStrength) <= pStrength.Value and v.Parent.Parent.Parent.Name == pWorld.Name then
                bestStrength = v
            end
        end
    end
    return bestStrength
end







Auto:Toggle("Auto Fight",function(bool)
    shared.ToggleAF=bool
    spawn(function()
        while shared.ToggleAF do
            local s,e = pcall(function()
                --Check if player is already in fight
                if Player.PlayerGui.Combat.Enabled == false then
                    task.wait(1)
                    local nextEnemy = findNextEnemy()
                    print(nextEnemy)
                    if nextEnemy then

                        local enemyName = nextEnemy.Name
                        local worldName = nextEnemy.Parent.Parent.Parent.Name
                        local argsAF = {
                            [1] = "BeginCombat",
                            [2] = "3B9F90D1-4461-4E17-9F85-A452DCD3DB26",
                            [3] = {
                                ["Name"] = enemyName,
                                ["Origin"] = worldName
                            }
                        }
                        print("Starting:", enemyName, worldName)
                        game:GetService("ReplicatedStorage").Postie.Sent:FireServer(unpack(argsAF))

                    end
                end
            end) if not s then print (e) end
            

            task.wait(1)
        end
    end)
end)

Auto:Toggle("Auto Rebirth",function(bool)
    shared.ToggleAR=bool
    spawn(function()
        while shared.ToggleAR do
            local canRebirth
            local s,e = pcall(function()
                local valueLabel = Player.PlayerGui.Menus.Rebirth.Bar.ReqVal.Text
                local first, second = valueLabel:match("([%d%.%a]+)%s*/%s*([%d%.%a]+)")
                canRebirth = fromSuffixString(first) >= fromSuffixString(second)
            end)
            if s and canRebirth and ToggleAR then
                print("Rebirthing")
                game:GetService("ReplicatedStorage").Postie.Sent:FireServer(unpack(argsRB))
                task.wait(0.3)
            end
            task.wait()
        end
    end)
end)


local PlayTimeList= {60, 180, 300, 420, 600, 900, 1200, 1500}
Auto:Toggle("Auto Claim",function(bool)
    shared.ToggleACQ=bool
    spawn(function()
        while shared.ToggleACQ do

            task.wait(300)
        end
    end)
end)

Auto:Toggle("Auto Click",function(bool)
    shared.ToggleAC=bool
    spawn(function()
        while shared.ToggleAC do
            game:GetService("ReplicatedStorage").Postie.Sent:FireServer(unpack(argsAC))
            task.wait(0.1)
        end
    end)
end)

local EggsList = {}
local DropList = Egg:Dropdown("SELECT MESSAGE",EggsList,true,function(SItem) --true/false, replaces the current title "Dropdown" with the option that t
    
end)

Egg:Toggle("Hatch",function(bool)
    shared.ToggleEH=bool
    spawn(function()
        while shared.ToggleEH do
            task.wait()
        end
    end)
end)





