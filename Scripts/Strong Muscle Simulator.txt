local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/LilYozza/Scripts/main/Misc/UILibrary.txt')))()w = library:CreateWindow("Main")
local Essential_Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/LilYozza/Scripts/main/Misc/Essential_Functions.txt"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

local Auto = w:CreateFolder("Auto")
local PotionMenu = w:CreateFolder("Potions")
local ChestMenu = w:CreateFolder("Chest")
local EggMenu = w:CreateFolder("Eggs")
local TeleportMenu = w:CreateFolder("Teleports")
local GamePassMenu = w:CreateFolder("GamePasses")
local Other = w:CreateFolder("Other")

--[[	TODO

--Fix Auto Boss (Testing)
--Auto Gift

]]--

-->Dynamic Variables<--
local _reqTraining2 = 1000000000000		--Candy Stage
local _reqTraining3 = 100000000000000	--Moon Stage


-->Base Variables<--
local isCheck = false
local IdleTimeOut = 10
local _current
local _sleepFunction

local Events = ReplicatedStorage:WaitForChild("Events")
local BOSS = ReplicatedStorage:WaitForChild("BOSS")

local Spawns = workspace:WaitForChild("Spawns")
local SafeZones = workspace:WaitForChild("ScriptSabitleri")
local Eggs = workspace:WaitForChild("Eggs")

local DailyChest = workspace.Oduller:WaitForChild("DailyChest")
local GemChest = workspace.Oduller:WaitForChild("GemReward")
local VIPChest = workspace.Oduller:WaitForChild("VIPReward")
local WINChest = workspace.Oduller:WaitForChild("WINReward")

-->Tables<--
local BossTbl = {}

-->Getting Data<--
for _,v in pairs(BOSS:GetChildren())do table.insert(BossTbl, v.Name)end

-->Non Return Functions<--



-->Return Functions<--
local function IdleChecker(_instance, _timeout)

	local _oldValue = _instance.Value
	task.wait(_timeout)
	if _oldValue == _instance.Value then
		return true
	else
		return false
	end

end

local function HealthChecker(_instance, _timeout)
	print(_instance.Health)
	local _oldValue = _instance.Health
	task.wait(_timeout)
	if _oldValue == _instance.Health then
		return true
	else
		return false
	end

end


shared.WeightSpeed = 0
local Speed = Auto:Slider("Weight Speed",{
	['default'] = 0;['min'] = 0;['max'] = 1;['precise'] = true;},function(value)
	shared.WeightSpeed = value
end)

Auto:Toggle("Auto Weight",function(bool)
	shared.ToggleAW=bool
	spawn(function()
		while shared.ToggleAW do
			pcall(function()
				if not _sleepFunction then
					local _tool = Player.Data.Weight.Value
					local _toolToggle = Player.PlayerGui.Main.Bottom.NumberOne.Toggled

					--IDLE CHECKER
					if isCheck == false then
						isCheck = true
						spawn(function()
							local _chk = IdleChecker(Player.leaderstats.Muscle, IdleTimeOut)
							if _chk == true then
								print("Weight Lift Idle...")
								_toolToggle.Value = false
								if shared.ToggleTZ and _current then MoveTo(SafeZones:FindFirstChild(_current)) end
							end
							isCheck = false
						end)

					end

					if _toolToggle.Value == false then
						Events.SkillToggle:FireServer("NumberOne", true)
						keypress("0x31") task.wait(0.3)
						keyrelease("0x31")
						_toolToggle.Value = true
						task.wait(0.5)
					end

					if _tool then
						Events.Weight:FireServer(_tool)
					end
				end

			end)
			task.wait(shared.WeightSpeed)
		end
	end)
end)


Auto:Toggle("Training Zones",function(bool)
	shared.ToggleTZ=bool
	spawn(function()
		if not shared.ToggleTZ then _current = nil end
		while shared.ToggleTZ do
			pcall(function()
				local _currentMuscle = Player.leaderstats.Muscle.Value
				local _isVip = Player.Data.VIP.Value

				if _currentMuscle < _reqTraining2 and _current ~= "Training" and _isVip == false then
					--Teleport to Training1
					_current = "Training"
					MoveTo(SafeZones:FindFirstChild(_current))

				elseif _currentMuscle < _reqTraining2 and _current ~= "VIP" and _isVip == true  then
					_current = "VIP"
					MoveTo(SafeZones:FindFirstChild(_current))

				end

				if _currentMuscle >= _reqTraining2 and _currentMuscle < _reqTraining3 and _current ~= "Training2" then
					--Teleport To Training2
					_current = "Training2"
					MoveTo(SafeZones:FindFirstChild(_current))
				end

				if _currentMuscle >= _reqTraining3 and _current ~= "Training3" then
					--Teleport To Training3
					_current = "Training3"
					MoveTo(SafeZones:FindFirstChild(_current))
				end
				--Check if Under Candy and Moon
			end)
			task.wait()
		end
	end)
end)


Auto:Toggle("Auto Spin",function(bool)
	shared.ToggleSP=bool

	spawn(function()
		while shared.ToggleSP do
			pcall(function()
				local _spins = Player.PlayerGui.Main.Frames.WheelFrame.Stat
				if tonumber(_spins.Text:gsub("%D", "")) > 0 then
					Events["Spin Wheel"]:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

Auto:Toggle("Auto Gift",function(bool)
	shared.ToggleAG=bool
	spawn(function()
		while shared.ToggleAG do
			pcall(function()
				local GiftInv = Player.PlayerGui.Main.Frames.freegiftframe.Inventory
				if GiftInv then
					for _,v in pairs(GiftInv:GetChildren())do
						local _timer = v:FindFirstChild("Money")
						local _tick = v:FindFirstChild("tick")
						if _timer and _tick and _timer.Text == "Claim!" and not _tick.Visible then
							--Claim wait 0.5 sec
							Events.FreeGift:FireServer(v.Name)
							task.wait(0.5)
						end
					end
				end
			end)
			task.wait(1)
		end
	end)
end)

local _punch
local _isToggled = false
local _isCheck2 = false
Auto:Toggle("Auto Boss",function(bool)
	shared.ToggleAB=bool

	spawn(function()
		while shared.ToggleAB do
			local s,e = pcall(function()
				local _boss 

				for _,v in pairs(BossTbl)do
					_boss = workspace:FindFirstChild(v)
					if _boss then break end
				end

				if _boss then
					local _bhrp = _boss:FindFirstChild("HumanoidRootPart")
					local _bhum = _boss:FindFirstChild("Humanoid")

					local _hrp = Player.Character:FindFirstChild("HumanoidRootPart")
					local _hum = Player.Character:FindFirstChild("Humanoid")

					if _bhrp and _hrp then
						--Teleport to boss
						--Attack
						local _toolToggle = Player.PlayerGui.Main.Bottom.NumberTwo.Toggled
						--_bhrp.CFrame = CFrame.new(_hrp.Position + _hrp.CFrame.LookVector * 2) -- BOSS TO PLAYER
						_hrp.CFrame = CFrame.new(_bhrp.Position + _bhrp.CFrame.LookVector * 2) -- PLAYER TO BOSS

						--IDLE CHECKER
						if not _isCheck2 then
							_isCheck2 = true
							spawn(function()
								local _chk = HealthChecker(_bhum, IdleTimeOut)
								if _chk == true then
									print("Boss Idle...")
									_toolToggle.Value = false
								end
								_isCheck2 = false
							end)

						end

						--Toggle Auto Weight Off until boss is dead
						if not _isToggled and shared.ToggleAW then
							_isToggled = true
							spawn(function()
								_sleepFunction = true task.wait(1)
								repeat task.wait() until not _bhum or _bhum.Health <= 0 or not shared.ToggleAB task.wait(0.5)
								_isToggled = false
								if shared.ToggleTZ and _current then MoveTo(SafeZones:FindFirstChild(_current)) end
								_sleepFunction = false
							end)
						end

						if _toolToggle.Value == false then
							Events.SkillToggle:FireServer("NumberTwo", true)
							keypress("0x32") task.wait(0.5)
							keyrelease("0x32")
							task.wait(0.5)
						end

						if not _punch or _punch == "Right" then
							_punch = "Left"
						elseif _punch == "Left" then
							_punch = "Right"
						end


						if _punch then
							ReplicatedStorage.Skills.CombatFolder.RemoteEvent:FireServer(_punch) task.wait(0.1)
						end
					end
				end
			end) if not s then print(e)end
			task.wait()
		end
	end)
end)

Auto:Toggle("Auto Rebirth",function(bool)
	shared.ToggleAR=bool

	spawn(function()
		while shared.ToggleAR do
			pcall(function()
				local _RebirthPercent = Player.PlayerGui.Main.Frames.RebirthFrame.BarFrame.Percent
				if _RebirthPercent and _RebirthPercent.Text == "Max" then
					Events.Rebirth:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

local function CheckChest(_chest)
	local _timer = _chest.PadShop.BillboardGui.Timer
	if _timer and (_timer.text == "Redeem" or _timer.text == "Claim") then
		return true
	end
end

ChestMenu:Toggle("Daily Chest",function(bool)
	shared.ToggleDC=bool
	spawn(function()
		while shared.ToggleDC do
			pcall(function()
				local _bool = CheckChest(DailyChest)
				if _bool then Touch(DailyChest.PadShop) end
			end)
			task.wait()
		end
	end)
end)

ChestMenu:Toggle("Gem Chest",function(bool)
	shared.ToggleGC=bool
	spawn(function()
		while shared.ToggleGC do
			pcall(function()
				local _bool = CheckChest(GemChest)
				if _bool then Touch(GemChest.PadShop) end
			end)
			task.wait()
		end
	end)
end)

ChestMenu:Toggle("Wins Chest",function(bool)
	shared.ToggleWC=bool
	spawn(function()
		while shared.ToggleWC do
			pcall(function()
				local _bool = CheckChest(WINChest)
				if _bool then Touch(WINChest.PadShop) end
			end)
			task.wait()
		end
	end)
end)

ChestMenu:Toggle("Vip Chest",function(bool)
	shared.ToggleVC=bool
	spawn(function()
		while shared.ToggleVC do
			pcall(function()
				local _bool = CheckChest(VIPChest)
				if _bool then Touch(VIPChest.PadShop) end
			end)
			task.wait()
		end
	end)
end)

local PetCon
EggMenu:Toggle("Equip best",function(bool)
	shared.Toggle_EB = bool
	spawn(function()
		pcall(function()
			if shared.Toggle_EB then
				Events.PetAction:InvokeServer("Equip Best")
				PetCon = Player.Pets.ChildAdded:Connect(function(_pet)
					repeat task.wait() until _pet or not shared.Toggle_EB
					Events.PetAction:InvokeServer("Equip Best")
				end)
			else
				if PetCon then PetCon:Disconnect() end
			end
		end)
	end)
end)

EggMenu:Toggle("Craft All",function(bool)
	shared.Toggle_CA = bool
	spawn(function()
		while shared.Toggle_CA do
			pcall(function()
				Events.PetAction:InvokeServer("Craft All")
			end)
			task.wait(1)
		end
	end)
end)


local Dropegg1 = EggMenu:Dropdown("Select Egg",Eggs:GetChildren(),true,function(SItem)
	shared.EggSelect = SItem
end)

EggMenu:Toggle("Egg x1",function(bool)
	shared.Toggle_E1 = bool
	spawn(function()
		while shared.Toggle_E1 do
			local s,e = pcall(function()
				if shared.EggSelect then Events.HatchEgg:InvokeServer(shared.EggSelect, 1) end
			end) if not s then print(e)end
			task.wait(0.1)
		end
	end)
end)

EggMenu:Toggle("Egg x2",function(bool)
	shared.Toggle_E2 = bool
	spawn(function()
		while shared.Toggle_E2 do
			pcall(function()
				if shared.EggSelect then Events.HatchEgg:InvokeServer(shared.EggSelect, 2) end
			end)
			task.wait(0.1)
		end
	end)
end)

EggMenu:Toggle("Egg x3",function(bool)
	shared.Toggle_E3 = bool
	spawn(function()
		while shared.Toggle_E3 do
			pcall(function()
				if shared.EggSelect then Events.HatchEgg:InvokeServer(shared.EggSelect, 3) end
			end)
			task.wait(0.1)
		end
	end)
end)



shared.SpawnSelect = Spawns:WaitForChild("Spawn")
local DropList1 = TeleportMenu:Dropdown("Spawn",Spawns:GetChildren(),true,function(SItem)
	shared.SpawnSelect = Spawns:FindFirstChild(SItem)
end)

TeleportMenu:Button("Teleport",function()
	spawn(function()
		if shared.SpawnSelect then MoveTo(shared.SpawnSelect) end
	end)
end)

shared.SafeZoneSelect = SafeZones:WaitForChild("Training")
local DropList2 = TeleportMenu:Dropdown("Training",SafeZones:GetChildren(),true,function(SItem)
	shared.SafeZoneSelect = SafeZones:FindFirstChild(SItem)
end)

TeleportMenu:Button("Teleport",function()
	spawn(function()
		if shared.SafeZoneSelect then MoveTo(shared.SafeZoneSelect) end
	end)
end)


PotionMenu:Toggle("Muscle",function(bool)
	shared.Toggle_PM=bool
	spawn(function()
		while shared.Toggle_PM do
			pcall(function()
				local _timer = Player.Data.MusclePotion
				if _timer and _timer.Value <= 0 then
					Events.MuscleUse:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

PotionMenu:Toggle("Gems",function(bool)
	shared.Toggle_PG=bool
	spawn(function()
		while shared.Toggle_PG do
			pcall(function()
				local _timer = Player.Data.GemPotion
				if _timer and _timer.Value <=0 then
					Events.GemUse:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

PotionMenu:Toggle("Super Lucky",function(bool)
	shared.Toggle_PSL=bool
	spawn(function()
		while shared.Toggle_PSL do
			pcall(function()
				local _timer = Player.Data.LuckPotion
				if _timer and _timer.Value <= 0 then
					Events.LuckUse:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

PotionMenu:Toggle("Ultra Lucky",function(bool)
	shared.Toggle_PUL=bool
	spawn(function()
		while shared.Toggle_PUL do
			pcall(function()
				local _timer = Player.Data.UltraLuckPotion
				if _timer and _timer.Value <= 0 then
					Events.UltraLuckUse:FireServer()
				end
			end)
			task.wait(1)
		end
	end)
end)

GamePassMenu:Button("Auto Clicker",function()
	spawn(function()
		Player.Data.AutoClick.Value = true
	end)
end)

GamePassMenu:Button("Auto Rebirth",function()
	spawn(function()
		Player.Data.AutoRebirth.Value = true
	end)
end)

GamePassMenu:Button("Unlock Stages",function()
	spawn(function()
		local _Zones = Player:WaitForChild("Zones")
		if _Zones then
			for _,v in pairs(_Zones:GetChildren()) do
				if v.Value == false then
					v.Value = true
				end
			end
		end
	end)
end)

Other:Button("Script #1",function()
	spawn(function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/Amenteso/robloxscripts/main/Key.lua",true))()
	end)
end)



local Miscload = loadstring(game:HttpGet('https://raw.githubusercontent.com/LilYozza/Scripts/main/Misc/Misc.txt'))()
