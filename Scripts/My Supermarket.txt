w = library:CreateWindow("Main")

local Players=game:GetService("Players")
local Player=game.Players.LocalPlayer

local Auto = w:CreateFolder("Auto")
local called = true
--local event, called, id = Instance.new("BindableEvent"), true

local Tycoon, CartReturn, CartTake, Storage
local Zhangxu = workspace:FindFirstChild("Zhangxu")
local Moon = workspace:FindFirstChild("Moon")
local Spawns = Moon:FindFirstChild("Spawns")
local OperatePoints = Moon:FindFirstChild("OperatePoints")
local UIUsePart = Zhangxu:FindFirstChild("UIUsePart")
local Cashier = "ShouYinTai" local Storage = "BuHuoJia"
local Restock = "rbxassetid://5991409056"

function GetTycoonInfo()
    for _,v in pairs(Spawns:GetDescendants()) do
        if v:IsA("TextLabel") and v.Text == Player.Name then Tycoon = v:FindFirstAncestor("PlayerArea").Parent v:FindFirstAncestor("PlayerArea").Parent.Name = Player.Name end
        if v.Name == "Center" and v:FindFirstAncestor("Return") and v:FindFirstAncestor(Player.Name) then CartReturn = v end
        if v.Name == "Center" and v:FindFirstAncestor("Take") and v:FindFirstAncestor(Player.Name) then CartTake = v end
    end
end GetTycoonInfo()

local function GetPart(name) local t = {} for _,v in pairs(workspace:GetChildren()) do if v.Name:match(name) then table.insert(t, v) end end return t end
local function GetType(Type) local t = {} for _,v in pairs(Zhangxu:FindFirstChild("UIUsePart"):GetDescendants()) do if v.Name == "Icon" and v:FindFirstAncestor("UITask") and v.Image == Type then table.insert(t, v:FindFirstAncestor("Task").Parent) end end return t end
local function GetCarts() local t = {} for _,v in pairs(Tycoon:FindFirstChild("PlayerArea"):GetDescendants()) do if  v.Name == "uniqueID" and v:FindFirstAncestor("Return") then table.insert(t, v.Parent) end end return t end
local function GetStatus(id) for _,v in pairs(Zhangxu:FindFirstChild("UIUsePart"):GetDescendants()) do if v.Name == "UITask" and v.Enabled and v:FindFirstAncestor(id) then return true end end return false end
local function GetOperationPoint(obj) for _,v in pairs(OperatePoints:GetChildren()) do if (v.Position - obj.Position).magnitude < 3 then return v end end end
local function GetTaskUI(id) for _,v in pairs(UIUsePart:GetChildren()) do if id == v.Name then return v end end end

Auto:Toggle("Auto Checkout",function(bool)
    shared.toggle1 = bool
    spawn(function()
        while shared.toggle1 do
            repeat task.wait() until called called = false
            --print("Started Job: Checkout")
            for _,v in pairs(GetPart(Cashier)) do
                if GetStatus(v:FindFirstChild("UniqueID").Value) and shared.toggle1 then
                    Player.character:WaitForChild("HumanoidRootPart").CFrame = v:FindFirstChild("Root").CFrame + Vector3.new(0,3,0)
                    local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerUse Event:FireServer(v:FindFirstChild("UniqueID").Value) wait(0.5)
                end
            end
            wait()
            --print("Finished Job: Checkout")
            called = true
        end
    end)
end)

Auto:Toggle("Auto Stock",function(bool)
    shared.toggle2 = bool
    task.spawn(function()
        while shared.toggle2 do
            repeat task.wait() until called called = false
            --print("Started Job: Stock")
            for _,v in pairs(GetType(Restock)) do
                if GetStatus(v.Name) and GetPart(Storage) and shared.toggle2 then
                    Player.character:WaitForChild("HumanoidRootPart").CFrame = v:FindFirstChild("Task").CFrame + Vector3.new(0,3,0) wait(0.5)
                    local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerUse Event:FireServer(tonumber(v.Name)) wait(0.5) wait(0.5)
                end
            end
            wait()
            --print("Finished Job: Stock")
            called = true
        end
    end)
end)

Auto:Toggle("Auto Cart",function(bool)
    shared.toggle3 = bool
    task.spawn(function()
        while shared.toggle3 do
            repeat task.wait() until called called = false
            if #GetCarts() > 0 and shared.toggle3 then
                --if not called then task.wait(3) event.Event:Wait() end called = false
                --print("Started Job: Cart")
                Player.character:WaitForChild("HumanoidRootPart").CFrame = CartReturn.CFrame + Vector3.new(0,3,0) wait(0.5)
                local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerTake Event:FireServer(4) wait(0.5)
                Player.character:WaitForChild("HumanoidRootPart").CFrame = CartTake.CFrame + Vector3.new(0,3,0) wait(0.5)
                local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerReturn Event:FireServer(3) wait(0.5)
                
                --if not called then called = true event:Fire() end
            end
            --print("Finished Job: Cart")
            called = true
            wait()
        end
    end)
end)

Auto:Toggle("Loose Carts",function(bool)
    shared.toggle4 = bool
    task.spawn(function()
        while shared.toggle4 do
            if #Zhangxu:FindFirstChild("UIDropCart"):GetChildren() > 0 then
                repeat task.wait() until called called = false
                --print("Started Job: Loose Carts")
                for _,v in pairs(Zhangxu:FindFirstChild("UIDropCart"):GetChildren()) do
                    if v:FindFirstChild("Task") and shared.toggle4 then
                        Player.character:WaitForChild("HumanoidRootPart").CFrame = v:FindFirstChild("Task").CFrame + Vector3.new(0,3,0) wait(0.5)
                        local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerPickDropCart Event:FireServer(tonumber(v.Name)) wait(0.5)
                        Player.character:WaitForChild("HumanoidRootPart").CFrame = CartTake.CFrame + Vector3.new(0,3,0) wait(0.5)
                        local Event = game:GetService("ReplicatedStorage").Scene.SceneManager.PlayerReturn Event:FireServer(3) wait(0.5)
                    end
                end
                --print("Finished Job: Loose Carts")
                called = true
            end
            wait()
        end
    end)
end)

Auto:Toggle("Auto Question",function(bool)
    shared.toggle5 = bool
    task.spawn(function()
        while shared.toggle5 do
            repeat task.wait() until called called = false
            --print("Started Job: Questions")
            if #Zhangxu:FindFirstChild("UINpcNeedAnswer"):GetChildren() > 0 then
                for _,v in pairs(Zhangxu:FindFirstChild("UINpcNeedAnswer"):GetChildren()) do
                    if v:FindFirstChild("FPoint") and #v.Parent:GetChildren() > 0 and shared.toggle5 then 
                        Player.character:WaitForChild("HumanoidRootPart").CFrame =v:FindFirstChild("FPoint").CFrame + Vector3.new(0,3,0) wait(0.5)
                        local Event = game:GetService("ReplicatedStorage").System.SpawnCustomer.SpawnCustomer.Communicate Event:FireServer(tonumber(v.Name)) wait(0.5) v:Destroy()
                    end
                end
            end
            wait()
            --print("Finished Job: Question")
            called = true
        end
    end)
end)





